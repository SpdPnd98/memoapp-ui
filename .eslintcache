[{"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/App.tsx":"1","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/home.tsx":"2","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/index.tsx":"3","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/routes/routes.tsx":"4","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/memoboards.tsx":"5","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/memos.tsx":"6","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/newMemo.tsx":"7","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/memo.tsx":"8","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/memoboard.tsx":"9","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/editMemo.tsx":"10","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/memoForm.tsx":"11","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/login.tsx":"12","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/resources/constants.tsx":"13","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/resources/categories.tsx":"14","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/resources/styles.tsx":"15","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/categoryDropDown.tsx":"16"},{"size":146,"mtime":1610090891526,"results":"17","hashOfConfig":"18"},{"size":359,"mtime":1610090891526,"results":"19","hashOfConfig":"20"},{"size":500,"mtime":1610090891526,"results":"21","hashOfConfig":"18"},{"size":453,"mtime":1610736068072,"results":"22","hashOfConfig":"18"},{"size":2566,"mtime":1610782438226,"results":"23","hashOfConfig":"18"},{"size":5413,"mtime":1610820333697,"results":"24","hashOfConfig":"18"},{"size":1775,"mtime":1610787143250,"results":"25","hashOfConfig":"18"},{"size":3359,"mtime":1610823450345,"results":"26","hashOfConfig":"18"},{"size":1972,"mtime":1610823088229,"results":"27","hashOfConfig":"18"},{"size":2490,"mtime":1610824382020,"results":"28","hashOfConfig":"18"},{"size":3827,"mtime":1610824954761,"results":"29","hashOfConfig":"18"},{"size":354,"mtime":1610736078796,"results":"30","hashOfConfig":"18"},{"size":108,"mtime":1610434232341,"results":"31","hashOfConfig":"18"},{"size":2837,"mtime":1610776913869,"results":"32","hashOfConfig":"18"},{"size":71,"mtime":1610707045841,"results":"33","hashOfConfig":"18"},{"size":3479,"mtime":1610825778279,"results":"34","hashOfConfig":"18"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"nbk0q8",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1gv5i1q",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/App.tsx",[],["71","72"],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/home.tsx",[],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/index.tsx",[],["73","74"],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/routes/routes.tsx",[],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/memoboards.tsx",["75"],"import  { useEffect, useState } from \"react\";\nimport { MemoboardProps } from \"../model/memoboard\";\nimport { URL } from \"../resources/constants\";\nimport Memoboard from \"./memoboard\";\nimport { useHistory } from \"react-router\";\n// import { Link, Redirect } from \"react-router-dom\";\n\nfunction Memoboards () {\n    const [id, setId] = useState<number>(1);\n    const [isLoaded, setIsLoaded] = useState<boolean>(false);\n    const [memoboards, setMemoboards] = useState<MemoboardProps[]>([]);\n    const history = useHistory();\n\n    useEffect(() => {\n        //fetch memoboards\n        const urlMemoboards = URL + \"/v1/memoboards\";\n        fetch(urlMemoboards)\n            .then(response => {\n                if(response.ok) {\n                    // console.log(JSON.stringify(response.json()));\n                    return response.json();\n                }\n                // console.log(response.text());\n                throw new Error(\"Network was not ok.\")\n            })\n            .then((response: any) => { // temporary solution, expected response is MemoboardProps[]\n                const id = 1; // some way to get cached value, default is master memo\n                console.log(JSON.stringify(response));\n                setId(id);\n                setIsLoaded(true);\n                setMemoboards(response.memoboards);\n            })\n            .catch(returnIndex);\n    }, []);\n\n    const returnIndex = () => {\n        history.push({\n            pathname: \"/\",\n            state: {\n                response: \"error!\"\n            },\n        })\n    };\n\n        \n    const selectMemoboard = (id: number) => {\n        const findMemoboard = memoboards.filter((memoboard: MemoboardProps) => memoboard.id === id);\n        if (findMemoboard.length === 0) {\n            console.log(\"error with filter!\");\n            console.log(\"the value of state id is: \" + id)\n            return; // wrong index!\n        }\n        const currentMemoBoard = findMemoboard[0]; //take the first board with matching id\n        //fetch corresponding memos\n        \n        return (\n            <Memoboard memoboard_name={currentMemoBoard.memoboard_name} \n                       id={currentMemoBoard.id}\n                       />\n        );\n    }\n\n    const loading = () => {\n        return (\n            <div>\n                <p>Loading...</p>\n            </div>\n        );\n    }\n    \n    if(isLoaded === true) {\n        return (\n            <div>\n                {selectMemoboard(id)}\n            </div>\n        );\n    } else {\n        return loading();\n    }\n}\n\nexport default Memoboards;","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/memos.tsx",["76","77","78"],"import { useEffect, useState } from \"react\";\nimport { MemosProps } from \"../model/memos\";\nimport { MemoProps } from \"../model/memo\";\nimport NewMemo from \"./newMemo\";\nimport Memo from \"./memo\";\nimport { URL } from \"../resources/constants\";\n\nimport Masonry from \"react-masonry-component\";\nimport { CategoriesProps } from \"../model/categories\";\n\nexport default function Memos(props:MemosProps) {\n    const defaultCategory = {\n        id: 1,\n        name: \"Uncategorized\",\n        color: \"#FFFFFF\",\n    }\n    const [isLoaded, setIsLoaded] = useState<boolean>(false);\n    const [isReload, setIsReload] = useState<boolean>(false); // this bool is to trigger rerendering\n    const [memos, setMemos] = useState<MemoProps[]>([]);\n    const [isEditGroup, setIsEditGroup] = useState<boolean>(false);\n    const [editingId, setIsEditingId] = useState<number>(0);\n    const [categories, setCategories] = useState(props.categories);\n    const loading = () => {\n        return (\n            <div>\n                <p>Loading Memos...</p>\n            </div>\n        );\n    };\n\n    const errorDialog = () => {\n        console.log(\"There was a problem with the request for your memos\");\n    };\n\n    const updateMemos = (response: any) => {\n        console.log(\"updating array...\");\n        console.log(JSON.stringify(response));\n        if(response.memos === undefined ) {\n            if (response.id !== undefined && response.editing !== undefined) {\n                setIsEditingId(response.id);\n                setIsEditGroup(response.editing);\n                setIsReload(!isReload);\n            } else {\n                console.log(\"There seems to be some error with passing things around\");\n            }\n        } else {\n            setMemos(response.memos);\n            setIsEditingId(0);\n            setIsEditGroup(false);\n        }\n    };\n\n    const findCategory = (id: number) => {\n        // returns the first category from the categories with the assoc id\n        if (categories.length === 0) {\n            console.log(\"problems with category...\")\n            return defaultCategory;\n        } else {\n            // console.log(categories);\n            return categories.filter(\n                (category : any) => category.id === id)[0]\n        }\n        \n    }\n\n    const parseMemo = (memo: MemoProps, editing: boolean) => {\n        // parse each memo item\n        const category = findCategory(memo.category_id);\n        return (\n            // <li>\n                <Memo \n                id={memo.id}\n                title={memo.title}\n                body={memo.body}\n                memoboard_id={memo.memoboard_id}\n                update_parent={updateMemos} \n                editing={editing}\n                key={memo.id}\n\n                category_id={category.id}\n                category_color = {category.color}\n                category_name = {category.name}\n                categories = {categories}\n                category_update = {props.update_categories}\n                />\n            // </li>\n            \n        );\n    };\n\n    useEffect(() => {\n        //fetch all memos\n        if (!isLoaded) {\n            const url = URL + \"/v1/memoboards/\" + props.memoboard_id + \"/memos\";\n            console.log(url);\n            fetch(url)\n                .then(response => {\n                    if(response.ok) {\n                        return response.json();\n                    }\n                    throw new Error(\"Network is not ok.\");\n                })\n                .then(response => {\n                    // console.log(JSON.stringify(response));\n                    if(isLoaded) {\n                        console.log(\"Memos have already been loaded.\");\n                    } else {\n                        setIsLoaded(true);\n                        setIsReload(false);\n                        setMemos(response.memos);\n                    }\n                })\n                .catch(errorDialog);    \n        }\n    }, [memos, editingId]);\n\n    const newMemoFrame = (\n                            <NewMemo title={\"\"} body={\"\"}\n                                     memoboard_id = {props.memoboard_id} \n                                     update_parent  = {updateMemos}\n\n                                     category_id={defaultCategory.id}\n                                     category_color = {defaultCategory.color}\n                                     category_name = {defaultCategory.name}\n                                     category_update = {props.update_categories}\n                                     categories = {props.categories} />\n                        );\n    \n    const masonryOptions = {\n        columnWidth: 1,\n        transitionDuration: 2,\n    }\n\n    if(isLoaded || isReload) {\n        if(memos.length === 0) {\n            return (\n                <Masonry\n                    options={masonryOptions}>\n                    {newMemoFrame}\n                    {/* <p>You do not have any memos yet.</p> */}\n                </Masonry>\n            );\n        }\n        const allMemos = memos.map((memo:MemoProps) => parseMemo(memo, memo.id === editingId ? isEditGroup : false));\n        return (\n            <div>\n                <Masonry\n                    options={masonryOptions}>\n                    {newMemoFrame}\n                    {allMemos}\n                </Masonry>\n            </div>\n        );\n        \n    } else {\n        return (loading());\n            \n    }\n}","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/newMemo.tsx",[],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/memo.tsx",[],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/memoboard.tsx",["79","80"],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/editMemo.tsx",["81","82"],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/memoForm.tsx",["83"],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/login.tsx",[],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/resources/constants.tsx",[],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/resources/categories.tsx",[],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/resources/styles.tsx",[],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/categoryDropDown.tsx",["84","85"],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"86","replacedBy":"90"},{"ruleId":"88","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":34,"column":8,"nodeType":"94","endLine":34,"endColumn":10,"suggestions":"95"},{"ruleId":"96","severity":1,"message":"97","line":9,"column":10,"nodeType":"98","messageId":"99","endLine":9,"endColumn":25},{"ruleId":"96","severity":1,"message":"100","line":22,"column":24,"nodeType":"98","messageId":"99","endLine":22,"endColumn":37},{"ruleId":"92","severity":1,"message":"101","line":115,"column":8,"nodeType":"94","endLine":115,"endColumn":26,"suggestions":"102"},{"ruleId":"96","severity":1,"message":"103","line":4,"column":8,"nodeType":"98","messageId":"99","endLine":4,"endColumn":24},{"ruleId":"96","severity":1,"message":"104","line":23,"column":11,"nodeType":"98","messageId":"99","endLine":23,"endColumn":30},{"ruleId":"96","severity":1,"message":"105","line":10,"column":19,"nodeType":"98","messageId":"99","endLine":10,"endColumn":27},{"ruleId":"96","severity":1,"message":"106","line":11,"column":18,"nodeType":"98","messageId":"99","endLine":11,"endColumn":25},{"ruleId":"96","severity":1,"message":"107","line":14,"column":25,"nodeType":"98","messageId":"99","endLine":14,"endColumn":39},{"ruleId":"96","severity":1,"message":"108","line":4,"column":10,"nodeType":"98","messageId":"99","endLine":4,"endColumn":16},{"ruleId":"96","severity":1,"message":"109","line":81,"column":11,"nodeType":"98","messageId":"99","endLine":81,"endColumn":25},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],["110"],["111"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'returnIndex'. Either include it or remove the dependency array.","ArrayExpression",["112"],"@typescript-eslint/no-unused-vars","'CategoriesProps' is defined but never used.","Identifier","unusedVar","'setCategories' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'isLoaded' and 'props.memoboard_id'. Either include them or remove the dependency array.",["113"],"'CategoryDropDown' is defined but never used.","'categoryDropDownBar' is assigned a value but never used.","'setTitle' is assigned a value but never used.","'setBody' is assigned a value but never used.","'setMemoboardId' is assigned a value but never used.","'Button' is defined but never used.","'updateCategory' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},"Update the dependencies array to be: [returnIndex]",{"range":"118","text":"119"},"Update the dependencies array to be: [memos, editingId, isLoaded, props.memoboard_id]",{"range":"120","text":"121"},[1377,1379],"[returnIndex]",[3937,3955],"[memos, editingId, isLoaded, props.memoboard_id]"]