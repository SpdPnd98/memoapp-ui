[{"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/App.tsx":"1","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/home.tsx":"2","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/index.tsx":"3","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/routes/routes.tsx":"4","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/memoboards.tsx":"5","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/memos.tsx":"6","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/newMemo.tsx":"7","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/memo.tsx":"8","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/memoboard.tsx":"9","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/editMemo.tsx":"10","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/memoForm.tsx":"11","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/login.tsx":"12","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/resources/constants.tsx":"13","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/resources/categories.tsx":"14","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/resources/styles.tsx":"15","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/categoryDropDown.tsx":"16","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/categoryForm.tsx":"17","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/reportWebVitals.ts":"18","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/newCategory.tsx":"19","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/editCategory.tsx":"20","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/categoryFilter.tsx":"21"},{"size":146,"mtime":1610090891526,"results":"22","hashOfConfig":"23"},{"size":359,"mtime":1610090891526,"results":"24","hashOfConfig":"25"},{"size":500,"mtime":1610090891526,"results":"26","hashOfConfig":"23"},{"size":481,"mtime":1610976777013,"results":"27","hashOfConfig":"23"},{"size":2566,"mtime":1610782438226,"results":"28","hashOfConfig":"23"},{"size":6572,"mtime":1610981819704,"results":"29","hashOfConfig":"23"},{"size":1775,"mtime":1610787143250,"results":"30","hashOfConfig":"23"},{"size":3359,"mtime":1610823450345,"results":"31","hashOfConfig":"23"},{"size":2154,"mtime":1610982191957,"results":"32","hashOfConfig":"23"},{"size":2490,"mtime":1610824382020,"results":"33","hashOfConfig":"23"},{"size":3827,"mtime":1610824954761,"results":"34","hashOfConfig":"23"},{"size":354,"mtime":1610736078796,"results":"35","hashOfConfig":"23"},{"size":108,"mtime":1610434232341,"results":"36","hashOfConfig":"23"},{"size":2837,"mtime":1610776913869,"results":"37","hashOfConfig":"23"},{"size":71,"mtime":1610707045841,"results":"38","hashOfConfig":"23"},{"size":3987,"mtime":1610981768903,"results":"39","hashOfConfig":"23"},{"size":4048,"mtime":1610886740133,"results":"40","hashOfConfig":"23"},{"size":425,"mtime":1610090891526,"results":"41","hashOfConfig":"23"},{"size":1553,"mtime":1610871413060,"results":"42","hashOfConfig":"23"},{"size":1391,"mtime":1610884585636,"results":"43","hashOfConfig":"23"},{"size":2455,"mtime":1610983923538,"results":"44","hashOfConfig":"23"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"nbk0q8",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1gv5i1q",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/App.tsx",[],["96","97"],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/home.tsx",[],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/index.tsx",[],["98","99"],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/routes/routes.tsx",[],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/memoboards.tsx",["100"],"import  { useEffect, useState } from \"react\";\nimport { MemoboardProps } from \"../model/memoboard\";\nimport { URL } from \"../resources/constants\";\nimport Memoboard from \"./memoboard\";\nimport { useHistory } from \"react-router\";\n// import { Link, Redirect } from \"react-router-dom\";\n\nfunction Memoboards () {\n    const [id, setId] = useState<number>(1);\n    const [isLoaded, setIsLoaded] = useState<boolean>(false);\n    const [memoboards, setMemoboards] = useState<MemoboardProps[]>([]);\n    const history = useHistory();\n\n    useEffect(() => {\n        //fetch memoboards\n        const urlMemoboards = URL + \"/v1/memoboards\";\n        fetch(urlMemoboards)\n            .then(response => {\n                if(response.ok) {\n                    // console.log(JSON.stringify(response.json()));\n                    return response.json();\n                }\n                // console.log(response.text());\n                throw new Error(\"Network was not ok.\")\n            })\n            .then((response: any) => { // temporary solution, expected response is MemoboardProps[]\n                const id = 1; // some way to get cached value, default is master memo\n                console.log(JSON.stringify(response));\n                setId(id);\n                setIsLoaded(true);\n                setMemoboards(response.memoboards);\n            })\n            .catch(returnIndex);\n    }, []);\n\n    const returnIndex = () => {\n        history.push({\n            pathname: \"/\",\n            state: {\n                response: \"error!\"\n            },\n        })\n    };\n\n        \n    const selectMemoboard = (id: number) => {\n        const findMemoboard = memoboards.filter((memoboard: MemoboardProps) => memoboard.id === id);\n        if (findMemoboard.length === 0) {\n            console.log(\"error with filter!\");\n            console.log(\"the value of state id is: \" + id)\n            return; // wrong index!\n        }\n        const currentMemoBoard = findMemoboard[0]; //take the first board with matching id\n        //fetch corresponding memos\n        \n        return (\n            <Memoboard memoboard_name={currentMemoBoard.memoboard_name} \n                       id={currentMemoBoard.id}\n                       />\n        );\n    }\n\n    const loading = () => {\n        return (\n            <div>\n                <p>Loading...</p>\n            </div>\n        );\n    }\n    \n    if(isLoaded === true) {\n        return (\n            <div>\n                {selectMemoboard(id)}\n            </div>\n        );\n    } else {\n        return loading();\n    }\n}\n\nexport default Memoboards;","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/memos.tsx",["101","102"],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/newMemo.tsx",[],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/memo.tsx",[],["103","104"],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/memoboard.tsx",["105","106"],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/editMemo.tsx",["107","108"],"import { useState } from \"react\";\nimport { MemoProps } from \"../model/memo\";\n// import Button from \"@material-ui/core/Button\";\n// import { TextField, Card, CardContent, CardActions} from \"@material-ui/core\";\nimport { withStyles, Theme } from \"@material-ui/core/styles\"\nimport MemoForm from \"./memoForm\";\nimport { styles } from \"../resources/styles\";\n\nfunction EditMemoComponent(props: MemoProps) {\n    const [title, setTitle] = useState<string>(props.title);\n    const [body, setBody] = useState<string>(props.body);\n    // const [categoryId, setCategoryId] = useState<number>(props.category_id);\n    // const [memoboardId, setMemoboardId] = useState<number>(props.memoboard_id);\n\n    const handleSubmit = (event: any, payload: any) => {\n        event.preventDefault();\n        const url = \"http://localhost:3000/v1/memoboards/\" \n                    + props.memoboard_id.toString() + \"/memos/\"\n                    + props.id;\n\n        if(title.length === 0 || body.length === 0) {\n            //show popup \"create proper memo!\"\n            console.log(\"error in update\")\n            return;\n        }\n        console.log(JSON.stringify(payload));\n\n        fetch(url,{\n            method: \"PATCH\",\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(payload)\n        })\n            .then(response => {\n                if(response.ok){\n                    return response.json();\n                }\n                throw new Error(\"network connection error!\");\n            })\n            .then(response => {\n                //re-render the app with the reply\n                props.update_parent(response);\n            })\n            .catch(error => console.log(error.message));\n    }\n\n    return (<MemoForm \n                id={props.id}\n                title={props.title}\n                body={props.body}\n                memoboard_id={props.memoboard_id}\n                update_parent={props.update_parent}\n                handle_submit = {handleSubmit}\n                editing={true}\n                text={\"Update\"}\n                \n                category_id={props.category_id}\n                category_color={props.category_color}\n                category_name={props.category_name}\n                categories = {props.categories}\n                category_update = {props.category_update} />)\n}\n\nexport default withStyles((theme: Theme) => styles)(EditMemoComponent);\n",["109","110"],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/memoForm.tsx",["111"],"import { CSSProperties, useState } from \"react\";\nimport { MemoFormProps } from \"../model/memo\";\nimport Button from \"@material-ui/core/Button\";\nimport { TextField, Card, CardContent, CardActions} from \"@material-ui/core\";\nimport { withStyles, Theme } from \"@material-ui/core/styles\"\nimport { styles } from \"../resources/styles\";\nimport CategoryDropDown from \"./categoryDropDown\";\n\n\nfunction MemoFormComponent(props: MemoFormProps) {\n    const [title, setTitle] = useState<string>(props.title);\n    const [body, setBody] = useState<string>(props.body);\n    const [categoryId, setCategoryId] = useState<number>(props.category_id);\n    const [memoboardId, setMemoboardId] = useState<number>(props.memoboard_id);\n    const [color, setColor] = useState<string>(props.category_color);\n\n    const payload = props.id === undefined ? \n    {\n        title: title,\n        body: body.replace(/\\n/g, \"<br></br>\"),\n        category_id: categoryId,\n        memoboard_id: memoboardId,\n    } : \n    {\n        id: props.id,\n        title: title,\n        body: body.replace(/\\n/g, \"<br></br>\"),\n        category_id: categoryId,\n        memoboard_id: memoboardId,\n    }\n\n    const renderUpdateButton = () => {\n\n        // console.log(title !== \"\" && body !== \"\");\n        return (\n            <Button type=\"submit\" \n                disabled={!(title !== \"\" \n                && body !== \"\")}>\n            \n                {props.text}\n                \n            </Button>\n        );\n    }\n\n    const renderCancelButton = () => {\n\n        // console.log(title !== \"\" && body !== \"\");\n        return (\n            <div onClick={() => props.update_parent({id: props.id, editing:false})}>\n                <Button >\n                    Cancel\n                </Button>\n            </div>\n            \n        );\n    }\n\n    const resetInput = () => {\n        setTitle(\"\");\n        setBody(\"\");\n    }\n\n    const handleSubmit = (event: any, payload: any) => {\n        props.handle_submit(event, payload);\n        // await (ms => new Promise(resolve => setTimeout(resolve, ms)))(300);\n        resetInput();\n    }\n\n    const updateMemo = (index: number) => {\n        setCategoryId(index);\n        setColor(props.categories.filter((category: any) => category.id === index)[0].color);\n    }\n\n    const formColorStyle: CSSProperties = {\n        background: color,\n    }\n\n    return (\n        <Card variant=\"outlined\" className={props.classes.root} style={formColorStyle} >\n            <form onSubmit={event => handleSubmit(event, payload)}>\n                <CardContent>\n                    <TextField\n                        type=\"text\"\n                        name=\"title\"\n                        id=\"memoTitle\"\n                        label=\"Title\"\n                        onChange={e => setTitle(e.target.value)}\n                        value = {title}\n                        ></TextField>\n                </CardContent>\n                <CardContent>\n                    <TextField\n                        multiline\n                        rows={5}\n                        name=\"body\"\n                        id=\"memoBody\"\n                        label=\"Body\"\n                        onChange={e => setBody(e.target.value)}\n                        value={body}\n                        />\n                </CardContent>\n                <CardActions>\n                    {renderUpdateButton()}\n                    {renderCancelButton()}\n                    <CategoryDropDown \n                        categories={props.categories}\n                        update_categories={props.category_update}\n                        active_category={props.category_id} \n                        update_memo={updateMemo}/>\n                </CardActions>\n            </form>\n        </Card>\n    );\n}\n\nexport default withStyles((theme: Theme) => styles)(MemoFormComponent);","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/login.tsx",[],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/resources/constants.tsx",[],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/resources/categories.tsx",[],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/resources/styles.tsx",[],["112","113"],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/categoryDropDown.tsx",["114"],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/categoryForm.tsx",["115"],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/reportWebVitals.ts",[],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/newCategory.tsx",["116","117","118","119","120","121"],"import { NewCategoryProps } from \"../model/category\";\nimport { useState } from \"react\";\nimport CategoryForm from \"./categoryForm\";\nimport { URL } from \"../resources/constants\";\n\nexport default function NewCategory(props: NewCategoryProps) {\n    const [id, setId] = useState<number>(1);\n    const [name, setName] = useState<string>(\"\");\n    const [color, setColor] = useState<string>(\"\");\n\n    // props.update_parent(true);\n\n    const createCategory = (payload: any) => {\n        const url = URL + \"/v1/categories\";\n        fetch (url, {\n            method: \"POST\",\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n            body :JSON.stringify(payload),\n        })\n        .then((response : any) => {\n            if(response.ok) {\n                // console.log(JSON.stringify(response.json()));\n                return response.json();\n            }\n            // console.log(response.text());\n            throw new Error(\"Network was not ok.\")\n        })\n        .then((response: any) => {\n            props.update_categories(response);\n            closeForm();\n        })\n        .catch(()=> {console.log(\"seems to be problems creating categories...\")})\n    }\n\n    const closeForm = () => {\n        props.update_parent(false);\n    }\n\n    return ( // update parent passed in is to remove the form.\n        <CategoryForm \n            name={\"\"}\n            color={\"#FFFFFF\"}\n            update_parent={createCategory}\n            close_form={closeForm} />\n    )\n}","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/editCategory.tsx",["122"],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/categoryFilter.tsx",["123"],{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"124","replacedBy":"128"},{"ruleId":"126","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":34,"column":8,"nodeType":"132","endLine":34,"endColumn":10,"suggestions":"133"},{"ruleId":"134","severity":1,"message":"135","line":23,"column":24,"nodeType":"136","messageId":"137","endLine":23,"endColumn":37},{"ruleId":"130","severity":1,"message":"138","line":141,"column":8,"nodeType":"132","endLine":141,"endColumn":26,"suggestions":"139"},{"ruleId":"124","replacedBy":"140"},{"ruleId":"126","replacedBy":"141"},{"ruleId":"134","severity":1,"message":"142","line":5,"column":10,"nodeType":"136","messageId":"137","endLine":5,"endColumn":23},{"ruleId":"134","severity":1,"message":"143","line":6,"column":8,"nodeType":"136","messageId":"137","endLine":6,"endColumn":22},{"ruleId":"134","severity":1,"message":"144","line":10,"column":19,"nodeType":"136","messageId":"137","endLine":10,"endColumn":27},{"ruleId":"134","severity":1,"message":"145","line":11,"column":18,"nodeType":"136","messageId":"137","endLine":11,"endColumn":25},{"ruleId":"124","replacedBy":"146"},{"ruleId":"126","replacedBy":"147"},{"ruleId":"134","severity":1,"message":"148","line":14,"column":25,"nodeType":"136","messageId":"137","endLine":14,"endColumn":39},{"ruleId":"124","replacedBy":"149"},{"ruleId":"126","replacedBy":"150"},{"ruleId":"134","severity":1,"message":"135","line":12,"column":24,"nodeType":"136","messageId":"137","endLine":12,"endColumn":37},{"ruleId":"134","severity":1,"message":"151","line":1,"column":10,"nodeType":"136","messageId":"137","endLine":1,"endColumn":23},{"ruleId":"134","severity":1,"message":"152","line":7,"column":12,"nodeType":"136","messageId":"137","endLine":7,"endColumn":14},{"ruleId":"134","severity":1,"message":"153","line":7,"column":16,"nodeType":"136","messageId":"137","endLine":7,"endColumn":21},{"ruleId":"134","severity":1,"message":"154","line":8,"column":12,"nodeType":"136","messageId":"137","endLine":8,"endColumn":16},{"ruleId":"134","severity":1,"message":"155","line":8,"column":18,"nodeType":"136","messageId":"137","endLine":8,"endColumn":25},{"ruleId":"134","severity":1,"message":"156","line":9,"column":12,"nodeType":"136","messageId":"137","endLine":9,"endColumn":17},{"ruleId":"134","severity":1,"message":"157","line":9,"column":19,"nodeType":"136","messageId":"137","endLine":9,"endColumn":27},{"ruleId":"134","severity":1,"message":"158","line":1,"column":10,"nodeType":"136","messageId":"137","endLine":1,"endColumn":18},{"ruleId":"134","severity":1,"message":"159","line":36,"column":11,"nodeType":"136","messageId":"137","endLine":36,"endColumn":16},"no-native-reassign",["160"],"no-negated-in-lhs",["161"],["160"],["161"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'returnIndex'. Either include it or remove the dependency array.","ArrayExpression",["162"],"@typescript-eslint/no-unused-vars","'setCategories' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'isLoaded' and 'props.memoboard_id'. Either include them or remove the dependency array.",["163"],["160"],["161"],"'CategoryProps' is defined but never used.","'CategoryFilter' is defined but never used.","'setTitle' is assigned a value but never used.","'setBody' is assigned a value but never used.",["160"],["161"],"'setMemoboardId' is assigned a value but never used.",["160"],["161"],"'CSSProperties' is defined but never used.","'id' is assigned a value but never used.","'setId' is assigned a value but never used.","'name' is assigned a value but never used.","'setName' is assigned a value but never used.","'color' is assigned a value but never used.","'setColor' is assigned a value but never used.","'useState' is defined but never used.","'theme' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},"Update the dependencies array to be: [returnIndex]",{"range":"168","text":"169"},"Update the dependencies array to be: [memos, editingId, isLoaded, props.memoboard_id]",{"range":"170","text":"171"},[1377,1379],"[returnIndex]",[5012,5030],"[memos, editingId, isLoaded, props.memoboard_id]"]