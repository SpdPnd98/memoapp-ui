[{"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/App.tsx":"1","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/home.tsx":"2","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/index.tsx":"3","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/routes/routes.tsx":"4","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/memoboards.tsx":"5","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/memos.tsx":"6","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/newMemo.tsx":"7","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/memo.tsx":"8","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/memoboard.tsx":"9","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/editMemo.tsx":"10","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/memoForm.tsx":"11","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/login.tsx":"12","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/resources/constants.tsx":"13","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/resources/categories.tsx":"14","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/resources/styles.tsx":"15","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/categoryDropDown.tsx":"16","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/categoryForm.tsx":"17","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/reportWebVitals.ts":"18","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/newCategory.tsx":"19","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/editCategory.tsx":"20"},{"size":146,"mtime":1610090891526,"results":"21","hashOfConfig":"22"},{"size":359,"mtime":1610090891526,"results":"23","hashOfConfig":"24"},{"size":500,"mtime":1610090891526,"results":"25","hashOfConfig":"22"},{"size":453,"mtime":1610736068072,"results":"26","hashOfConfig":"22"},{"size":2566,"mtime":1610782438226,"results":"27","hashOfConfig":"22"},{"size":5413,"mtime":1610820333697,"results":"28","hashOfConfig":"22"},{"size":1775,"mtime":1610787143250,"results":"29","hashOfConfig":"22"},{"size":3359,"mtime":1610823450345,"results":"30","hashOfConfig":"22"},{"size":2083,"mtime":1610880531697,"results":"31","hashOfConfig":"22"},{"size":2490,"mtime":1610824382020,"results":"32","hashOfConfig":"22"},{"size":3827,"mtime":1610824954761,"results":"33","hashOfConfig":"22"},{"size":354,"mtime":1610736078796,"results":"34","hashOfConfig":"22"},{"size":108,"mtime":1610434232341,"results":"35","hashOfConfig":"22"},{"size":2837,"mtime":1610776913869,"results":"36","hashOfConfig":"22"},{"size":71,"mtime":1610707045841,"results":"37","hashOfConfig":"22"},{"size":3981,"mtime":1610884337318,"results":"38","hashOfConfig":"22"},{"size":4048,"mtime":1610886740133,"results":"39","hashOfConfig":"22"},{"size":425,"mtime":1610090891526,"results":"40","hashOfConfig":"22"},{"size":1553,"mtime":1610871413060,"results":"41","hashOfConfig":"22"},{"size":1391,"mtime":1610884585636,"results":"42","hashOfConfig":"22"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"nbk0q8",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1gv5i1q",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/App.tsx",[],["92","93"],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/home.tsx",[],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/index.tsx",[],["94","95"],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/routes/routes.tsx",[],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/memoboards.tsx",["96"],"import  { useEffect, useState } from \"react\";\nimport { MemoboardProps } from \"../model/memoboard\";\nimport { URL } from \"../resources/constants\";\nimport Memoboard from \"./memoboard\";\nimport { useHistory } from \"react-router\";\n// import { Link, Redirect } from \"react-router-dom\";\n\nfunction Memoboards () {\n    const [id, setId] = useState<number>(1);\n    const [isLoaded, setIsLoaded] = useState<boolean>(false);\n    const [memoboards, setMemoboards] = useState<MemoboardProps[]>([]);\n    const history = useHistory();\n\n    useEffect(() => {\n        //fetch memoboards\n        const urlMemoboards = URL + \"/v1/memoboards\";\n        fetch(urlMemoboards)\n            .then(response => {\n                if(response.ok) {\n                    // console.log(JSON.stringify(response.json()));\n                    return response.json();\n                }\n                // console.log(response.text());\n                throw new Error(\"Network was not ok.\")\n            })\n            .then((response: any) => { // temporary solution, expected response is MemoboardProps[]\n                const id = 1; // some way to get cached value, default is master memo\n                console.log(JSON.stringify(response));\n                setId(id);\n                setIsLoaded(true);\n                setMemoboards(response.memoboards);\n            })\n            .catch(returnIndex);\n    }, []);\n\n    const returnIndex = () => {\n        history.push({\n            pathname: \"/\",\n            state: {\n                response: \"error!\"\n            },\n        })\n    };\n\n        \n    const selectMemoboard = (id: number) => {\n        const findMemoboard = memoboards.filter((memoboard: MemoboardProps) => memoboard.id === id);\n        if (findMemoboard.length === 0) {\n            console.log(\"error with filter!\");\n            console.log(\"the value of state id is: \" + id)\n            return; // wrong index!\n        }\n        const currentMemoBoard = findMemoboard[0]; //take the first board with matching id\n        //fetch corresponding memos\n        \n        return (\n            <Memoboard memoboard_name={currentMemoBoard.memoboard_name} \n                       id={currentMemoBoard.id}\n                       />\n        );\n    }\n\n    const loading = () => {\n        return (\n            <div>\n                <p>Loading...</p>\n            </div>\n        );\n    }\n    \n    if(isLoaded === true) {\n        return (\n            <div>\n                {selectMemoboard(id)}\n            </div>\n        );\n    } else {\n        return loading();\n    }\n}\n\nexport default Memoboards;","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/memos.tsx",["97","98","99"],"import { useEffect, useState } from \"react\";\nimport { MemosProps } from \"../model/memos\";\nimport { MemoProps } from \"../model/memo\";\nimport NewMemo from \"./newMemo\";\nimport Memo from \"./memo\";\nimport { URL } from \"../resources/constants\";\n\nimport Masonry from \"react-masonry-component\";\nimport { CategoriesProps } from \"../model/categories\";\n\nexport default function Memos(props:MemosProps) {\n    const defaultCategory = {\n        id: 1,\n        name: \"Uncategorized\",\n        color: \"#FFFFFF\",\n    }\n    const [isLoaded, setIsLoaded] = useState<boolean>(false);\n    const [isReload, setIsReload] = useState<boolean>(false); // this bool is to trigger rerendering\n    const [memos, setMemos] = useState<MemoProps[]>([]);\n    const [isEditGroup, setIsEditGroup] = useState<boolean>(false);\n    const [editingId, setIsEditingId] = useState<number>(0);\n    const [categories, setCategories] = useState(props.categories);\n    const loading = () => {\n        return (\n            <div>\n                <p>Loading Memos...</p>\n            </div>\n        );\n    };\n\n    const errorDialog = () => {\n        console.log(\"There was a problem with the request for your memos\");\n    };\n\n    const updateMemos = (response: any) => {\n        console.log(\"updating array...\");\n        console.log(JSON.stringify(response));\n        if(response.memos === undefined ) {\n            if (response.id !== undefined && response.editing !== undefined) {\n                setIsEditingId(response.id);\n                setIsEditGroup(response.editing);\n                setIsReload(!isReload);\n            } else {\n                console.log(\"There seems to be some error with passing things around\");\n            }\n        } else {\n            setMemos(response.memos);\n            setIsEditingId(0);\n            setIsEditGroup(false);\n        }\n    };\n\n    const findCategory = (id: number) => {\n        // returns the first category from the categories with the assoc id\n        if (categories.length === 0) {\n            console.log(\"problems with category...\")\n            return defaultCategory;\n        } else {\n            // console.log(categories);\n            return categories.filter(\n                (category : any) => category.id === id)[0]\n        }\n        \n    }\n\n    const parseMemo = (memo: MemoProps, editing: boolean) => {\n        // parse each memo item\n        const category = findCategory(memo.category_id);\n        return (\n            // <li>\n                <Memo \n                id={memo.id}\n                title={memo.title}\n                body={memo.body}\n                memoboard_id={memo.memoboard_id}\n                update_parent={updateMemos} \n                editing={editing}\n                key={memo.id}\n\n                category_id={category.id}\n                category_color = {category.color}\n                category_name = {category.name}\n                categories = {categories}\n                category_update = {props.update_categories}\n                />\n            // </li>\n            \n        );\n    };\n\n    useEffect(() => {\n        //fetch all memos\n        if (!isLoaded) {\n            const url = URL + \"/v1/memoboards/\" + props.memoboard_id + \"/memos\";\n            console.log(url);\n            fetch(url)\n                .then(response => {\n                    if(response.ok) {\n                        return response.json();\n                    }\n                    throw new Error(\"Network is not ok.\");\n                })\n                .then(response => {\n                    // console.log(JSON.stringify(response));\n                    if(isLoaded) {\n                        console.log(\"Memos have already been loaded.\");\n                    } else {\n                        setIsLoaded(true);\n                        setIsReload(false);\n                        setMemos(response.memos);\n                    }\n                })\n                .catch(errorDialog);    \n        }\n    }, [memos, editingId]);\n\n    const newMemoFrame = (\n                            <NewMemo title={\"\"} body={\"\"}\n                                     memoboard_id = {props.memoboard_id} \n                                     update_parent  = {updateMemos}\n\n                                     category_id={defaultCategory.id}\n                                     category_color = {defaultCategory.color}\n                                     category_name = {defaultCategory.name}\n                                     category_update = {props.update_categories}\n                                     categories = {props.categories} />\n                        );\n    \n    const masonryOptions = {\n        columnWidth: 1,\n        transitionDuration: 2,\n    }\n\n    if(isLoaded || isReload) {\n        if(memos.length === 0) {\n            return (\n                <Masonry\n                    options={masonryOptions}>\n                    {newMemoFrame}\n                    {/* <p>You do not have any memos yet.</p> */}\n                </Masonry>\n            );\n        }\n        const allMemos = memos.map((memo:MemoProps) => parseMemo(memo, memo.id === editingId ? isEditGroup : false));\n        return (\n            <div>\n                <Masonry\n                    options={masonryOptions}>\n                    {newMemoFrame}\n                    {allMemos}\n                </Masonry>\n            </div>\n        );\n        \n    } else {\n        return (loading());\n            \n    }\n}","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/newMemo.tsx",[],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/memo.tsx",[],["100","101"],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/memoboard.tsx",["102"],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/editMemo.tsx",["103","104"],"import { useState } from \"react\";\nimport { MemoProps } from \"../model/memo\";\n// import Button from \"@material-ui/core/Button\";\n// import { TextField, Card, CardContent, CardActions} from \"@material-ui/core\";\nimport { withStyles, Theme } from \"@material-ui/core/styles\"\nimport MemoForm from \"./memoForm\";\nimport { styles } from \"../resources/styles\";\n\nfunction EditMemoComponent(props: MemoProps) {\n    const [title, setTitle] = useState<string>(props.title);\n    const [body, setBody] = useState<string>(props.body);\n    // const [categoryId, setCategoryId] = useState<number>(props.category_id);\n    // const [memoboardId, setMemoboardId] = useState<number>(props.memoboard_id);\n\n    const handleSubmit = (event: any, payload: any) => {\n        event.preventDefault();\n        const url = \"http://localhost:3000/v1/memoboards/\" \n                    + props.memoboard_id.toString() + \"/memos/\"\n                    + props.id;\n\n        if(title.length === 0 || body.length === 0) {\n            //show popup \"create proper memo!\"\n            console.log(\"error in update\")\n            return;\n        }\n        console.log(JSON.stringify(payload));\n\n        fetch(url,{\n            method: \"PATCH\",\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(payload)\n        })\n            .then(response => {\n                if(response.ok){\n                    return response.json();\n                }\n                throw new Error(\"network connection error!\");\n            })\n            .then(response => {\n                //re-render the app with the reply\n                props.update_parent(response);\n            })\n            .catch(error => console.log(error.message));\n    }\n\n    return (<MemoForm \n                id={props.id}\n                title={props.title}\n                body={props.body}\n                memoboard_id={props.memoboard_id}\n                update_parent={props.update_parent}\n                handle_submit = {handleSubmit}\n                editing={true}\n                text={\"Update\"}\n                \n                category_id={props.category_id}\n                category_color={props.category_color}\n                category_name={props.category_name}\n                categories = {props.categories}\n                category_update = {props.category_update} />)\n}\n\nexport default withStyles((theme: Theme) => styles)(EditMemoComponent);\n",["105","106"],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/memoForm.tsx",["107"],"import { CSSProperties, useState } from \"react\";\nimport { MemoFormProps } from \"../model/memo\";\nimport Button from \"@material-ui/core/Button\";\nimport { TextField, Card, CardContent, CardActions} from \"@material-ui/core\";\nimport { withStyles, Theme } from \"@material-ui/core/styles\"\nimport { styles } from \"../resources/styles\";\nimport CategoryDropDown from \"./categoryDropDown\";\n\n\nfunction MemoFormComponent(props: MemoFormProps) {\n    const [title, setTitle] = useState<string>(props.title);\n    const [body, setBody] = useState<string>(props.body);\n    const [categoryId, setCategoryId] = useState<number>(props.category_id);\n    const [memoboardId, setMemoboardId] = useState<number>(props.memoboard_id);\n    const [color, setColor] = useState<string>(props.category_color);\n\n    const payload = props.id === undefined ? \n    {\n        title: title,\n        body: body.replace(/\\n/g, \"<br></br>\"),\n        category_id: categoryId,\n        memoboard_id: memoboardId,\n    } : \n    {\n        id: props.id,\n        title: title,\n        body: body.replace(/\\n/g, \"<br></br>\"),\n        category_id: categoryId,\n        memoboard_id: memoboardId,\n    }\n\n    const renderUpdateButton = () => {\n\n        // console.log(title !== \"\" && body !== \"\");\n        return (\n            <Button type=\"submit\" \n                disabled={!(title !== \"\" \n                && body !== \"\")}>\n            \n                {props.text}\n                \n            </Button>\n        );\n    }\n\n    const renderCancelButton = () => {\n\n        // console.log(title !== \"\" && body !== \"\");\n        return (\n            <div onClick={() => props.update_parent({id: props.id, editing:false})}>\n                <Button >\n                    Cancel\n                </Button>\n            </div>\n            \n        );\n    }\n\n    const resetInput = () => {\n        setTitle(\"\");\n        setBody(\"\");\n    }\n\n    const handleSubmit = (event: any, payload: any) => {\n        props.handle_submit(event, payload);\n        // await (ms => new Promise(resolve => setTimeout(resolve, ms)))(300);\n        resetInput();\n    }\n\n    const updateMemo = (index: number) => {\n        setCategoryId(index);\n        setColor(props.categories.filter((category: any) => category.id === index)[0].color);\n    }\n\n    const formColorStyle: CSSProperties = {\n        background: color,\n    }\n\n    return (\n        <Card variant=\"outlined\" className={props.classes.root} style={formColorStyle} >\n            <form onSubmit={event => handleSubmit(event, payload)}>\n                <CardContent>\n                    <TextField\n                        type=\"text\"\n                        name=\"title\"\n                        id=\"memoTitle\"\n                        label=\"Title\"\n                        onChange={e => setTitle(e.target.value)}\n                        value = {title}\n                        ></TextField>\n                </CardContent>\n                <CardContent>\n                    <TextField\n                        multiline\n                        rows={5}\n                        name=\"body\"\n                        id=\"memoBody\"\n                        label=\"Body\"\n                        onChange={e => setBody(e.target.value)}\n                        value={body}\n                        />\n                </CardContent>\n                <CardActions>\n                    {renderUpdateButton()}\n                    {renderCancelButton()}\n                    <CategoryDropDown \n                        categories={props.categories}\n                        update_categories={props.category_update}\n                        active_category={props.category_id} \n                        update_memo={updateMemo}/>\n                </CardActions>\n            </form>\n        </Card>\n    );\n}\n\nexport default withStyles((theme: Theme) => styles)(MemoFormComponent);","/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/login.tsx",[],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/resources/constants.tsx",[],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/resources/categories.tsx",[],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/resources/styles.tsx",[],["108","109"],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/categoryDropDown.tsx",["110"],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/categoryForm.tsx",["111"],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/reportWebVitals.ts",[],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/newCategory.tsx",["112","113","114","115","116","117"],"/mnt/DLRigStorage/codes/CVWO-memo-submission/memoapp-ui/src/components/editCategory.tsx",["118"],{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","replacedBy":"122"},{"ruleId":"119","replacedBy":"123"},{"ruleId":"121","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":34,"column":8,"nodeType":"127","endLine":34,"endColumn":10,"suggestions":"128"},{"ruleId":"129","severity":1,"message":"130","line":9,"column":10,"nodeType":"131","messageId":"132","endLine":9,"endColumn":25},{"ruleId":"129","severity":1,"message":"133","line":22,"column":24,"nodeType":"131","messageId":"132","endLine":22,"endColumn":37},{"ruleId":"125","severity":1,"message":"134","line":115,"column":8,"nodeType":"127","endLine":115,"endColumn":26,"suggestions":"135"},{"ruleId":"119","replacedBy":"136"},{"ruleId":"121","replacedBy":"137"},{"ruleId":"129","severity":1,"message":"138","line":4,"column":8,"nodeType":"131","messageId":"132","endLine":4,"endColumn":24},{"ruleId":"129","severity":1,"message":"139","line":10,"column":19,"nodeType":"131","messageId":"132","endLine":10,"endColumn":27},{"ruleId":"129","severity":1,"message":"140","line":11,"column":18,"nodeType":"131","messageId":"132","endLine":11,"endColumn":25},{"ruleId":"119","replacedBy":"141"},{"ruleId":"121","replacedBy":"142"},{"ruleId":"129","severity":1,"message":"143","line":14,"column":25,"nodeType":"131","messageId":"132","endLine":14,"endColumn":39},{"ruleId":"119","replacedBy":"144"},{"ruleId":"121","replacedBy":"145"},{"ruleId":"129","severity":1,"message":"133","line":12,"column":24,"nodeType":"131","messageId":"132","endLine":12,"endColumn":37},{"ruleId":"129","severity":1,"message":"146","line":1,"column":10,"nodeType":"131","messageId":"132","endLine":1,"endColumn":23},{"ruleId":"129","severity":1,"message":"147","line":7,"column":12,"nodeType":"131","messageId":"132","endLine":7,"endColumn":14},{"ruleId":"129","severity":1,"message":"148","line":7,"column":16,"nodeType":"131","messageId":"132","endLine":7,"endColumn":21},{"ruleId":"129","severity":1,"message":"149","line":8,"column":12,"nodeType":"131","messageId":"132","endLine":8,"endColumn":16},{"ruleId":"129","severity":1,"message":"150","line":8,"column":18,"nodeType":"131","messageId":"132","endLine":8,"endColumn":25},{"ruleId":"129","severity":1,"message":"151","line":9,"column":12,"nodeType":"131","messageId":"132","endLine":9,"endColumn":17},{"ruleId":"129","severity":1,"message":"152","line":9,"column":19,"nodeType":"131","messageId":"132","endLine":9,"endColumn":27},{"ruleId":"129","severity":1,"message":"153","line":1,"column":10,"nodeType":"131","messageId":"132","endLine":1,"endColumn":18},"no-native-reassign",["154"],"no-negated-in-lhs",["155"],["154"],["155"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'returnIndex'. Either include it or remove the dependency array.","ArrayExpression",["156"],"@typescript-eslint/no-unused-vars","'CategoriesProps' is defined but never used.","Identifier","unusedVar","'setCategories' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'isLoaded' and 'props.memoboard_id'. Either include them or remove the dependency array.",["157"],["154"],["155"],"'CategoryDropDown' is defined but never used.","'setTitle' is assigned a value but never used.","'setBody' is assigned a value but never used.",["154"],["155"],"'setMemoboardId' is assigned a value but never used.",["154"],["155"],"'CSSProperties' is defined but never used.","'id' is assigned a value but never used.","'setId' is assigned a value but never used.","'name' is assigned a value but never used.","'setName' is assigned a value but never used.","'color' is assigned a value but never used.","'setColor' is assigned a value but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},"Update the dependencies array to be: [returnIndex]",{"range":"162","text":"163"},"Update the dependencies array to be: [memos, editingId, isLoaded, props.memoboard_id]",{"range":"164","text":"165"},[1377,1379],"[returnIndex]",[3937,3955],"[memos, editingId, isLoaded, props.memoboard_id]"]